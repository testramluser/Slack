{
  "name": "router",
  "description": "Simple middleware-style router",
  "version": "1.1.1",
  "author": {
    "name": "Douglas Christopher Wilson",
    "email": "doug@somethingdoug.com"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/pillarjs/router.git"
  },
  "dependencies": {
    "array-flatten": "1.1.0",
    "debug": "~2.2.0",
    "methods": "~1.1.1",
    "parseurl": "~1.3.0",
    "path-to-regexp": "0.1.3",
    "setprototypeof": "1.0.0",
    "utils-merge": "1.0.0"
  },
  "devDependencies": {
    "after": "0.8.1",
    "finalhandler": "0.3.6",
    "istanbul": "0.3.9",
    "mocha": "2.2.5",
    "supertest": "1.0.1"
  },
  "files": [
    "lib/",
    "LICENSE",
    "HISTORY.md",
    "README.md",
    "engine.js",
    "index.js"
  ],
  "engines": {
    "node": ">= 0.8"
  },
  "scripts": {
    "test": "mocha --reporter spec --bail --check-leaks test/",
    "test-cov": "istanbul cover node_modules/mocha/bin/_mocha -- --reporter dot --check-leaks test/",
    "test-travis": "istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --reporter spec --check-leaks test/"
  },
  "gitHead": "597a9ac029fbc51d2b1ddd5d90039bf87e8ea58a",
  "readme": "# router\n\n[![NPM Version][npm-image]][npm-url]\n[![NPM Downloads][downloads-image]][downloads-url]\n[![Node.js Version][node-version-image]][node-version-url]\n[![Build Status][travis-image]][travis-url]\n[![Test Coverage][coveralls-image]][coveralls-url]\n\nSimple middleware-style router\n\n## Installation\n\n```bash\n$ npm install router\n```\n\n## API\n\n```js\nvar finalhandler = require('finalhandler')\nvar http         = require('http')\nvar Router       = require('router')\n\nvar router = Router()\nrouter.get('/', function (req, res) {\n  res.setHeader('Content-Type', 'text/plain; charset=utf-8')\n  res.end('Hello World!')\n})\n\nvar server = http.createServer(function(req, res) {\n  router(req, res, finalhandler(req, res))\n})\n\nserver.listen(3000)\n```\n\nThis module is currently an extracted version from the Express project,\nbut with the main change being it can be used with a plain `http.createServer`\nobject or other web frameworks by removing Express-specific API calls.\n\n## Router(options)\n\nOptions\n\n- `strict`        - When `false` trailing slashes are optional (default: `false`)\n- `caseSensitive` - When `true` the routing will be case sensitive. (default: `false`)\n- `mergeParams`   - When `true` any `req.params` passed to the router will be\n  merged into the router's `req.params`. (default: `false`) ([example](#example-using-mergeparams))\n\nReturns a function with the signature `router(res, res, callback)` where\n`callback([err])` must be provided to handle errors and fall-through from\nnot handling requests.\n\n### router.use([path], ...middleware)\n\nUse the given middleware function for all http methods on the given `path`,\ndefaulting to the root path.\n\n`router` does not automatically see `use` as a handler. As such, it will not\nconsider it one for handling `OPTIONS` requests.\n\n* Note: If a `path` is specified, that `path` is stripped from the start of\n  `req.url`.\n\n```js\nrouter.use(function (req, res, next) {\n  // do your things\n\n  // continue to the next middleware\n  // the request will stall if this is not called\n  next()\n\n  // note: you should NOT call `next` if you have begun writing to the response\n})\n```\n\n### router\\[method](path, ...[middleware], handler)\n\nThe [http methods](https://github.com/jshttp/methods/blob/master/index.js) provide\nthe routing functionality in `router`.\n\nThese are functions which you can directly call on the router to register a new\n`handler` for the `method` at a specified `path`.\n\n```js\n// handle a `GET` request\nrouter.get('/', function (req, res) {\n  res.setHeader('Content-Type', 'text/plain; charset=utf-8')\n  res.end('Hello World!')\n})\n```\n\nAdditional middleware may be given before the handler. These middleware behave\nexactly as normal with one exception: they may invoke `next('route')`.\nCalling `next('route')` bypasses the remaining middleware and handler for this\nroute, passing the request on to the next route.\n\n### router.param(name, param_middleware)\n\nMaps the specified path parameter `name` to a specialized param-capturing middleware.\n\nThis function positions the middleware in the same stack as `.use`.\n\nParameter mapping is used to provide pre-conditions to routes\nwhich use normalized placeholders. For example a _:user_id_ parameter\ncould automatically load a user's information from the database without\nany additional code:\n\n```js\nrouter.param('user_id', function (req, res, next, id) {\n  User.find(id, function (err, user) {\n    if (err) {\n      return next(err)\n    } else if (!user) {\n      return next(new Error('failed to load user'))\n    }\n    req.user = user\n\n    // continue processing the request\n    next()\n  })\n})\n```\n\n### router.route(path)\n\nCreates an instance of a single `Route` for the given `path`.\n(See `Router.Route` below)\n\nRoutes can be used to handle http `methods` with their own, optional middleware.\n\nUsing `router.route(path)` is a recommended approach to avoiding duplicate\nroute naming and thus typo errors.\n\n```js\nvar api = router.route('/api/')\n```\n\n## Router.Route(path)\n\nRepresents a single route as an instance that can be used can be used to handle\nhttp `methods` with it's own, optional middleware.\n\n### route\\[method](handler)\n\nThese are functions which you can directly call on a route to register a new\n`handler` for the `method` on the route.\n\n```js\n// handle a `GET` request\nvar status = router.route('/status')\n\nstatus.get(function (req, res) {\n  res.setHeader('Content-Type', 'text/plain; charset=utf-8')\n  res.end('All Systems Green!')\n})\n```\n\n### route.all(handler)\n\nAdds a handler for all HTTP methods to this route.\n\nThe handler can behave like middleware and call `next` to continue processing\nrather than responding.\n\n```js\nrouter.route('/')\n.all(function (req, res, next) {\n  next()\n})\n.all(check_something)\n.get(function (req, res) {\n  res.setHeader('Content-Type', 'text/plain; charset=utf-8')\n  res.end('Hello World!')\n})\n```\n\n## Examples\n\n```js\n// import our modules\nvar http         = require('http')\nvar Router       = require('router')\nvar finalhandler = require('finalhandler')\nvar compression  = require('compression')\nvar bodyParser   = require('body-parser')\n\n// store our message to display\nvar message = \"Hello World!\"\n\n// initialize the router & server and add a final callback.\nvar router = Router()\nvar server = http.createServer(function onRequest(req, res) {\n  router(req, res, finalhandler(req, res))\n})\n\n// use some middleware and compress all outgoing responses\nrouter.use(compression())\n\n// handle `GET` requests to `/message`\nrouter.get('/message', function (req, res) {\n  res.statusCode = 200\n  res.setHeader('Content-Type', 'text/plain; charset=utf-8')\n  res.end(message + '\\n')\n})\n\n// create and mount a new router for our API\nvar api = Router()\nrouter.use('/api/', api)\n\n// add a body parsing middleware to our API\napi.use(bodyParser.json())\n\n// handle `PATCH` requests to `/api/set-message`\napi.patch('/set-message', function (req, res) {\n  if (req.body.value) {\n    message = req.body.value\n\n    res.statusCode = 200\n    res.setHeader('Content-Type', 'text/plain; charset=utf-8')\n    res.end(message + '\\n')\n  } else {\n    res.statusCode = 400\n    res.setHeader('Content-Type', 'text/plain; charset=utf-8')\n    res.end('Invalid API Syntax\\n')\n  }\n})\n\n// make our http server listen to connections\nserver.listen(8080)\n```\n\nYou can get the message by running this command in your terminal,\n or navigating to `127.0.0.1:8080` in a web browser.\n```bash\ncurl http://127.0.0.1:8080\n```\n\nYou can set the message by sending it a `PATCH` request via this command:\n```bash\ncurl http://127.0.0.1:8080/api/set-message -X PATCH -H \"Content-Type: application/json\" -d '{\"value\":\"Cats!\"}'\n```\n\n### Example using mergeParams\n\n```js\nvar http         = require('http')\nvar Router       = require('router')\nvar finalhandler = require('finalhandler')\n\n// this example is about the mergeParams option\nvar opts = { mergeParams: true }\n\n// make a router with out special options\nvar router = Router(opts)\nvar server = http.createServer(function onRequest(req, res) {\n\n  // set something to be passed into the router\n  req.params = { type: 'kitten' }\n\n  router(req, res, finalhandler(req, res))\n})\n\nrouter.get('/', function (req, res) {\n  res.statusCode = 200\n  res.setHeader('Content-Type', 'text/plain; charset=utf-8')\n\n  // with respond with the the params that were passed in\n  res.end(req.params.type + '\\n')\n})\n\n// make another router with our options\nvar handler = Router(opts)\n\n// mount our new router to a route that accepts a param\nrouter.use('/:path', handler)\n\nhandler.get('/', function (req, res) {\n  res.statusCode = 200\n  res.setHeader('Content-Type', 'text/plain; charset=utf-8')\n\n  // will respond with the param of the router's parent route\n  res.end(path + '\\n')\n})\n\n// make our http server listen to connections\nserver.listen(8080)\n```\n\nNow you can get the type, or what path you are requesting:\n```bash\ncurl http://127.0.0.1:8080\n> kitten\ncurl http://127.0.0.1:8080/such_path\n> such_path\n```\n\n## Implementing Your Own Router\n\nImplementing a custom path matching library on top of this module is as easy as using `Router.Engine`. For example, to implement an \"exact\" path matching module, we can do this:\n\n```js\nvar Engine = require('router').Engine\nvar slice = Array.prototype.slice\n\n/**\n * Accepts the path and some options we defined in our engine.\n */\nfunction toFunction (route, options) {\n  if (!options.end) {\n    return function (path) {\n      var matches = path.substr(0, route.length) === route\n\n      return matches ? { path: path } : false\n    }\n  }\n\n  return function (path) {\n    return path === route ? { path: path } : false\n  }\n}\n\n/**\n * The constructor must return the engine instance.\n */\nfunction ExactRouter (options) {\n  return Engine.call(this, options)\n}\n\n/**\n * Inherits from the engine prototype.\n */\nExactRouter.prototype = Object.create(Engine.prototype)\n\n/**\n * Set up `Router#use` with our custom path matching implementation.\n */\nExactRouter.prototype.use = function () {\n  // Use a simple utility for supporting a single path argument like `router`.\n  var opts = Router.Engine.sanitizeArgs.apply(null, arguments)\n  var match = toFunction(opts.path, { end: false })\n\n  return Engine.prototype.use.call(this, opts.path, match, opts.callbacks)\n}\n\n/**\n * Set up `Router#route` with our custom path patching implementation.\n */\nExactRouter.prototype.route = function (path) {\n  var match = toFunction(path, { end: true })\n\n  return Engine.prototype.route.call(this, path, match)\n}\n\n/**\n * Set up all the router method shorthands.\n */\nEngine.methods.forEach(function (method) {\n  ExactRouter.prototype[method] = function (path) {\n    var route = this.route(path)\n    route[method].apply(route, slice.call(arguments, 1))\n    return this\n  }\n})\n```\n\nBoth the path matching function and the path itself must be passed into the `route` and `use` engine methods. This is for debugging, so `path` should be a human-readable path name. `Engine#use` also accepts an array of handlers to immediately include. The match function must return an object of `{ path: string, params: object }` or `false` if it didn't match.\n\nNote: The path matching utility should not throw errors. Decoding of parameters is handled by the engine.\n\n## License\n\n[MIT](LICENSE)\n\n[npm-image]: https://img.shields.io/npm/v/router.svg\n[npm-url]: https://npmjs.org/package/router\n[node-version-image]: https://img.shields.io/node/v/router.svg\n[node-version-url]: http://nodejs.org/download/\n[travis-image]: https://img.shields.io/travis/pillarjs/router/master.svg\n[travis-url]: https://travis-ci.org/pillarjs/router\n[coveralls-image]: https://img.shields.io/coveralls/pillarjs/router/master.svg\n[coveralls-url]: https://coveralls.io/r/pillarjs/router?branch=master\n[downloads-image]: https://img.shields.io/npm/dm/router.svg\n[downloads-url]: https://npmjs.org/package/router\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/pillarjs/router/issues"
  },
  "homepage": "https://github.com/pillarjs/router#readme",
  "_id": "router@1.1.1",
  "_shasum": "a9bf3f55440f9c1069470a38b73eadc931dabb97",
  "_from": "git+https://github.com/blakeembrey/router.git#router-engine",
  "_resolved": "git+https://github.com/blakeembrey/router.git#597a9ac029fbc51d2b1ddd5d90039bf87e8ea58a"
}
