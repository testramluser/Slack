// Generated by CoffeeScript 1.7.1
(function() {
  var LIPSUM, delay, email_re, interval, kv, null_or_undefined,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __hasProp = {}.hasOwnProperty;

  interval = function() {
    return setInterval(arguments[1], arguments[0]);
  };

  delay = function() {
    return setTimeout(arguments[1], arguments[0]);
  };

  email_re = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;

  LIPSUM = 'Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Nullam id dolor id nibh ultricies vehicula ut id elit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas faucibus mollis interdum. Cras mattis consectetur purus sit amet fermentum. Nullam id dolor id nibh ultricies vehicula ut id elit.';

  module.exports = {
    say_hello: function(name) {
      return "Hello " + name + "!";
    },
    delay: delay,
    interval: interval,
    unbox_arr: function(v) {
      if (v instanceof Array) {
        return v[0];
      } else {
        return v;
      }
    },
    unbox_func: function(v) {
      if (typeof v === 'function') {
        return v();
      } else {
        return v;
      }
    },
    arr: function(arrayish) {
      return Array.prototype.slice.apply(arrayish, null);
    },
    arrdiff: function(arr1, arr2) {
      var e, onlyin1, onlyin2;
      onlyin1 = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = arr1.length; _i < _len; _i++) {
          e = arr1[_i];
          if (__indexOf.call(arr2, e) < 0) {
            _results.push(e);
          }
        }
        return _results;
      })();
      onlyin2 = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = arr2.length; _i < _len; _i++) {
          e = arr2[_i];
          if (__indexOf.call(arr1, e) < 0) {
            _results.push(e);
          }
        }
        return _results;
      })();
      return [onlyin1, onlyin2];
    },
    arr_builder: function(f) {
      var arr;
      arr = [];
      f(function(x) {
        return arr.push(x);
      });
      return arr;
    },
    lipsum: function(len) {
      if (len == null) {
        len = 0;
      }
      if (len === 0) {
        return LIPSUM;
      } else {
        return LIPSUM.substring(0, len);
      }
    },
    obj_empty: function(obj) {
      var k, v;
      if (obj != null) {
        for (k in obj) {
          if (!__hasProp.call(obj, k)) continue;
          v = obj[k];
          return false;
        }
      }
      return true;
    },
    getter: function(prop) {
      return 'get' + prop[0].toUpperCase() + prop.slice(1);
    },
    setter: function(prop) {
      return 'set' + prop[0].toUpperCase() + prop.slice(1);
    },
    kv: kv = function(obj, func) {
      var k, v, _results;
      if (obj != null) {
        _results = [];
        for (k in obj) {
          if (!__hasProp.call(obj, k)) continue;
          v = obj[k];
          _results.push(func(k, v));
        }
        return _results;
      }
    },
    kkv: function(obj, func) {
      return kv(obj, function(k, v) {
        return kv(v, function(k2, v2) {
          return func(k, k2, v2);
        });
      });
    },
    err: function(e) {
      if (e != null) {
        console.log(e);
        console.log(e.stack);
        throw e;
      }
    },
    collapse_arr: function(arr) {
      var x, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = arr.length; _i < _len; _i++) {
        x = arr[_i];
        if (!null_or_undefined(x)) {
          _results.push(x);
        }
      }
      return _results;
    },
    null_or_undefined: null_or_undefined = function(v) {
      switch (typeof v) {
        case 'undefined':
          return true;
        case 'object':
          return v == null;
        default:
          return false;
      }
    },
    when_not_falsy: function(f1, f2) {
      var iv;
      return iv = interval(100, function() {
        if (f1() != null) {
          clearInterval(iv);
          return f2();
        }
      });
    },
    tap: function(v) {
      console.log(v);
      return v;
    },
    first_key: function(obj) {
      var k, v;
      for (k in obj) {
        v = obj[k];
        return k;
      }
    },
    first_own_key: function(obj) {
      var k, v;
      for (k in obj) {
        if (!__hasProp.call(obj, k)) continue;
        v = obj[k];
        return k;
      }
    },
    lazy: function(f) {
      var res, res_ready;
      res_ready = false;
      res = null;
      return function() {
        if (res_ready) {
          return res;
        } else {
          res_ready = true;
          res = f();
          return res;
        }
      };
    },
    clone: function(obj) {
      var k, o, v;
      o = {};
      for (k in obj) {
        if (!__hasProp.call(obj, k)) continue;
        v = obj[k];
        o[k] = v;
      }
      return o;
    },
    insist: function(times, interval_, f) {
      var count, x;
      count = 0;
      return (x = function() {
        var e;
        try {
          return f();
        } catch (_error) {
          e = _error;
          count += 1;
          if (count < times) {
            return delay(interval_, x);
          }
        }
      })();
    },
    valid_email: function(v) {
      return typeof v === 'string' && email_re.test(v);
    },
    email_re: email_re,

    /*
    to get rid of 'return cb e if e?'
    
    func1 = ( a, cb ) ->
      func2 ( e, r ) ->
        return cb e if e?
        console.log r
    
    func1 = ( a, cb ) ->
      func2 ( cbe cb ) ( e, r ) ->
        console.log r
     */
    cbe: function(done) {
      return function(cb) {
        return function() {
          if (arguments[0] != null) {
            return done(arguments[0]);
          } else {
            return cb.apply(null, arguments);
          }
        };
      };
    },
    assert_type: function(type, v, message) {
      if (message == null) {
        message = ("Expected " + v + " to be a ") + type;
      }
      if (typeof v !== type) {
        throw new Error(message);
      }
    }
  };

}).call(this);
