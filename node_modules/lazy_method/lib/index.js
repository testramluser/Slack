// Generated by CoffeeScript 1.6.3
(function() {
  var lazy, memoize, memoize_async, serial, _;

  _ = require('underscore');

  serial = 0;

  module.exports = lazy = function(f) {
    var id;
    id = '___lazy___' + (serial++);
    return function() {
      if (typeof this[id] !== 'function') {
        this[id] = memoize(f);
      }
      return this[id].apply(this, arguments);
    };
  };

  lazy.async = function(f) {
    var id;
    id = '___lazy___' + (serial++);
    return function() {
      if (typeof this[id] !== 'function') {
        this[id] = memoize_async(f);
      }
      return this[id].apply(this, arguments);
    };
  };

  memoize = function(f) {
    return _.memoize(f);
  };

  memoize_async = function(f) {
    var cache, pending;
    cache = {};
    pending = {};
    return function() {
      var args, cb, key,
        _this = this;
      args = Array.prototype.slice.apply(arguments);
      cb = args.pop();
      key = JSON.stringify(args);
      if (cache[key] != null) {
        return process.nextTick(function() {
          return cb(null, cache[key]);
        });
      } else if (pending[key] != null) {
        return pending[key].push(cb);
      } else {
        pending[key] = [cb];
        return f.apply(this, args.concat(function(e, r) {
          var finish;
          finish = function(e, r) {
            var c, p, _i, _len;
            p = pending[key];
            for (_i = 0, _len = p.length; _i < _len; _i++) {
              c = p[_i];
              c(e, r);
            }
            return delete pending[key];
          };
          if (e != null) {
            return finish(e);
          }
          return finish(null, cache[key] = r);
        }));
      }
    };
  };

}).call(this);
