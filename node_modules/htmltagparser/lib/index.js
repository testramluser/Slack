// Generated by CoffeeScript 1.6.3
(function() {
  var ParseError, UnknownTagError, main, syntax_parser, valid_html_tags,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  valid_html_tags = require('./valid_html_tags');

  syntax_parser = require('./syntax_parser');

  /*
  parse string into an object with "tag, id, classes"
  throws ParseError, UnknownTagError
  
  @str the string to parse
  @strict whether to check for valid HTML tags. Defaults to yes
  
  returns:
  @tag      the type/name of tag ( div, input, etc )
  @id       optional ID string ( '#my-form' --> 'my-form' ) ( null if no ID )
  @classes  array of strings containing classes ( empty if no classes )
  */


  module.exports = main = function(str, strict, lowercase) {
    var classes, id, t, tag;
    if (strict == null) {
      strict = true;
    }
    if (lowercase == null) {
      lowercase = true;
    }
    if (typeof str !== 'string') {
      throw new ParseError('(undefined)');
    }
    if (str.length === 0) {
      throw new ParseError('(empty string)');
    }
    if ((t = syntax_parser(str)) == null) {
      throw new ParseError(str);
    }
    tag = t.tag, id = t.id, classes = t.classes;
    if (lowercase) {
      tag = tag.toLowerCase();
    }
    if (strict && !valid_html_tags(tag.toLowerCase())) {
      throw new UnknownTagError(tag);
    }
    return {
      tag: tag,
      id: id,
      classes: classes
    };
  };

  main.ParseError = ParseError = (function(_super) {
    __extends(ParseError, _super);

    function ParseError(tag) {
      this.message = "[htmltagparser] Can't parse HTML tag: '" + tag + "'";
    }

    return ParseError;

  })(Error);

  UnknownTagError = UnknownTagError = (function(_super) {
    __extends(UnknownTagError, _super);

    function UnknownTagError(tag) {
      this.message = "[htmltagparser] Unknown HTML tag: '" + tag + "'";
    }

    return UnknownTagError;

  })(Error);

}).call(this);
